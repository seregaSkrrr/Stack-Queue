#include <iostream>
#include <queue>
#include <random>

using namespace std;

class Node {
public:
	int data;
	Node* left;
	Node* right;
public:
	Node(int d) : data{ d }, left{ nullptr }, right{ nullptr } {}
	~Node() {}
	void print() {
		cout << data << " ";
	}
};

class Tree {
	Node* root = nullptr;
	Node* add(Node*& parent, Node* node);
	void print(Node* node);
public:
	void addNode(Node* n) {
		add(root, n);
	}
	void print() {
		print(root);
	}


};

void Tree::print(Node* node) {
	if (node != 0) {
		print(node->left);
		cout << node->data << " ";
		print(node->right);
	}
}

Node* Tree::add(Node*& parent, Node* z) {

	if (!parent) {
		parent = z;
		return z;
	}

	if (z->data < parent->data) {
		parent->left = add(parent->left, z);

	}

	else if (z->data >= parent->data) {
		parent->right = add(parent->right, z);

	}

	return  parent;
};

int main(){
	setlocale(LC_ALL, "");

	Tree t;

	t.addNode(new Node(7));
	t.addNode(new Node(3));
	t.addNode(new Node(9));
	t.addNode(new Node(9));
	t.addNode(new Node(5));
	t.addNode(new Node(2));
	t.addNode(new Node(8));
	t.addNode(new Node(10));
	t.addNode(new Node(15));
	t.addNode(new Node(1));
	t.addNode(new Node(6));

	t.print();

	return 0;
}
